//+------------------------------------------------------------------+
//|                                                     trending.mq5 |
//|                                  Copyright 2025, MetaQuotes Ltd. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2025, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>
CTrade trade;

input int fastMa = 14;
input int slowMa = 30;
input int rsi = 14;
input int ema = 200;
input int rsiOverBought = 70;
input int rsiOverSold = 20;
input int slPoint = 150;
input int tpPoint = 500;

//input int rsiMa = 20;

int OnInit()
  {
//---
   Comment("trending initiatied");
//---
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
//---
   
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
//---
     int fastMA = iMA(_Symbol,PERIOD_CURRENT,fastMa,0,MODE_SMA,PRICE_CLOSE);
     int slowMA = iMA(_Symbol, PERIOD_CURRENT,slowMa,0,MODE_SMA,PRICE_CLOSE);
     int RSI = iRSI(_Symbol,PERIOD_CURRENT,rsi,PRICE_CLOSE);
     int EMA200 = iMA(_Symbol, PERIOD_CURRENT,ema,0,MODE_EMA,PRICE_CLOSE);
     //int RSIMa = iMA(_Symbol, PERIOD_CURRENT,slowMa,0,MODE_SMA,fastMA);
     
     double fastMaBuffer[], slowMaBuffer[], rsiBuffer[], emaBuffer[];
     
     ArraySetAsSeries(rsiBuffer,true);
     CopyBuffer(fastMA,0,0,3,fastMaBuffer);
     CopyBuffer(slowMA,0,0,3,slowMaBuffer);
     CopyBuffer(EMA200,0,0,3,emaBuffer);
     CopyBuffer(RSI,0,0,1,rsiBuffer);
     
     double closePrice = iClose(_Symbol,PERIOD_CURRENT,1);
     
     bool uptrend = closePrice > emaBuffer[1];
     bool downtrend = closePrice < emaBuffer[1];
     
     bool buySignal = rsiBuffer[0] > 70 && fastMaBuffer[2] > slowMaBuffer[2];
     bool sellSignal = rsiBuffer[0] < 20 && fastMaBuffer[2] > slowMaBuffer[2];
     
     double point = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
     
     double stoploss = slPoint * point;
     double takeProfit = tpPoint * point;
     
     Print(stoploss);
     
     if (uptrend) {
      
      if (buySignal && PositionSelect(_Symbol) == false) {
         
         double entryPrice = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
         
         double stoploss = entryPrice - stoploss;
         double takeProfit = entryPrice + takeProfit;
         
         trade.Buy(0.1,NULL,entryPrice,stoploss,takeProfit);
         
      }
      
     }
     
     if (downtrend) {
      
      if (sellSignal && PositionSelect(_Symbol) == false) {
         
         double entryPrice = SymbolInfoDouble(_Symbol, SYMBOL_BID);
         
         double stoploss = entryPrice + stoploss;
         double takeProfit = entryPrice - takeProfit;
         
         trade.Sell(0.1,NULL,entryPrice,stoploss,takeProfit);
         
      }
      
     }
     
     
     //Print(closePrice);
     
     //Print(emaBuffer[1]);
     
     //int RSIMa = iMA(_Symbol, PERIOD_CURRENT,rsiMa,0,MODE_SMA, RSI);
     //int RSIMa  = iMAOnArray(rsiBuffer, 0, 5, 0, MODE_SMA);
     //CopyBuffer(RSIMa,0,0,3,RSIMaBuffer);
     
     //Print(fastMaBuffer[2], " , ", slowMaBuffer[2], " , ", rsiBuffer[0], " , ");
     //Print(rsiValue);
     
     //bool buySignal = RSI
  }
//+------------------------------------------------------------------+
