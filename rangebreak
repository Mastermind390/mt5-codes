
#property copyright "Copyright 2025, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"


#include <Trade\Trade.mqh>
CTrade trade;

input int rangeStartHour = 0;
input int rangeStartMinute = 0;
input int rangeEndHour = 7;
input int rangeEndMnute = 0;
input int tradingEndHour = 17;
input int tradingEndMinute = 0;
input int slPoint = 200;
input int tpPoint = 350;

datetime rangeStart, rangeEnd, tradingEnd;

double rangeHigh;
double rangeLow;

int OnInit()  {

     
     return(INIT_SUCCEEDED);
  }



void OnDeinit(const int reason)
  {


   
  }


void OnTick()
  {
  
   calcTimes();
   calculRange();
   
   if (TimeCurrent() > rangeEnd) {
   
      double bid = SymbolInfoDouble(_Symbol,SYMBOL_BID);
      double ask = SymbolInfoDouble(_Symbol,SYMBOL_ASK);
      
      double buyEntryPrice = ask;
      double SellEntryPrice = bid;
      
      double point = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
      
      double stoploss   = slPoint * point;
      double takeProfit = tpPoint * point;
      
      Comment(bid, " , ", ask);
      
      if (rangeHigh > 0  && rangeLow > 0) {
         
         if(buyEntryPrice > rangeHigh && !PositionSelect(_Symbol)) {
            
              trade.Buy(0.01,NULL,buyEntryPrice,buyEntryPrice - stoploss, buyEntryPrice + takeProfit,"BUY");
         
         } else if (SellEntryPrice < rangeLow && !PositionSelect(_Symbol)) {
         
            trade.Sell(0.01,NULL,SellEntryPrice,SellEntryPrice + stoploss, SellEntryPrice - takeProfit,"SELL");
         }
      
      }
   
   }
   
  }



void calcTimes() {
   
   MqlDateTime dt;
   TimeCurrent(dt);
   
   dt.hour = rangeStartHour;
   dt.min = rangeStartMinute;
   dt.sec = 0;
   rangeStart = StructToTime(dt);
   
   dt.hour = rangeEndHour;
   dt.min = rangeEndMnute;
   rangeEnd = StructToTime(dt);
   
   dt.hour = tradingEndHour;
   dt.min = tradingEndMinute;
   tradingEnd = StructToTime(dt);
   
   //Print(tradingEnd);

}


void calculRange() {

   double highs[];
   double lows[];
   
   CopyHigh(_Symbol,PERIOD_CURRENT,rangeStart,rangeEnd,highs);
   CopyLow(_Symbol,PERIOD_CURRENT,rangeStart,rangeEnd,lows);
   
   if(ArraySize(highs) < 1 || ArraySize(lows) < 1) return;
   
   int indexHighest = ArrayMaximum(highs);
   int indexLowest = ArrayMinimum(lows);
   
   rangeHigh = highs[indexHighest];
   rangeLow = lows[indexLowest];
   
   string objName = " Range " + TimeToString(rangeStart, TIME_DATE);
   
   if (ObjectFind(0, objName) < 0) {
   
      ObjectCreate(0, objName, OBJ_RECTANGLE, 0, rangeStart,rangeLow,rangeEnd,rangeHigh);
      ObjectSetInteger(0, objName, OBJPROP_FILL, true);
      ObjectSetInteger(0, objName, OBJPROP_COLOR, clrLightYellow);
   
   } else {
   
      ObjectSetDouble(0,objName,OBJPROP_PRICE,0,rangeLow);
      ObjectSetDouble(0,objName,OBJPROP_PRICE,1,rangeHigh);
   }
   
   //Print(rangeHigh, " , ", rangeLow);

}
